/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "streaming_rpc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace com { namespace lesgo { namespace thrift { namespace rpc { namespace streaming {

int _kPROTOCOL_TYPEValues[] = {
  PROTOCOL_TYPE::PROTOCOL_TYPE_RTSP,
  PROTOCOL_TYPE::PROTOCOL_TYPE_SIP,
  PROTOCOL_TYPE::PROTOCOL_TYPE_ONVIF
};
const char* _kPROTOCOL_TYPENames[] = {
  "PROTOCOL_TYPE_RTSP",
  "PROTOCOL_TYPE_SIP",
  "PROTOCOL_TYPE_ONVIF"
};
const std::map<int, const char*> _PROTOCOL_TYPE_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPROTOCOL_TYPEValues, _kPROTOCOL_TYPENames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSTREAMING_TYPEValues[] = {
  STREAMING_TYPE::STREAMING_TYPE_ES,
  STREAMING_TYPE::STREAMING_TYPE_PS,
  STREAMING_TYPE::STREAMING_TYPE_TS
};
const char* _kSTREAMING_TYPENames[] = {
  "STREAMING_TYPE_ES",
  "STREAMING_TYPE_PS",
  "STREAMING_TYPE_TS"
};
const std::map<int, const char*> _STREAMING_TYPE_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSTREAMING_TYPEValues, _kSTREAMING_TYPENames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


PushSipStream::~PushSipStream() throw() {
}


void PushSipStream::__set_msgId(const std::string& val) {
  this->msgId = val;
}

void PushSipStream::__set_streamingType(const std::string& val) {
  this->streamingType = val;
}

void PushSipStream::__set_serverUrl(const std::string& val) {
  this->serverUrl = val;
}

void PushSipStream::__set_streamID(const std::string& val) {
  this->streamID = val;
}

uint32_t PushSipStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_msgId = false;
  bool isset_streamingType = false;
  bool isset_serverUrl = false;
  bool isset_streamID = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msgId);
          isset_msgId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamingType);
          isset_streamingType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverUrl);
          isset_serverUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamID);
          isset_streamID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_msgId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_streamingType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_serverUrl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_streamID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PushSipStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PushSipStream");

  xfer += oprot->writeFieldBegin("msgId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msgId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("streamingType", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->streamingType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serverUrl", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->serverUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("streamID", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->streamID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PushSipStream &a, PushSipStream &b) {
  using ::std::swap;
  swap(a.msgId, b.msgId);
  swap(a.streamingType, b.streamingType);
  swap(a.serverUrl, b.serverUrl);
  swap(a.streamID, b.streamID);
}

PushSipStream::PushSipStream(const PushSipStream& other0) {
  msgId = other0.msgId;
  streamingType = other0.streamingType;
  serverUrl = other0.serverUrl;
  streamID = other0.streamID;
}
PushSipStream& PushSipStream::operator=(const PushSipStream& other1) {
  msgId = other1.msgId;
  streamingType = other1.streamingType;
  serverUrl = other1.serverUrl;
  streamID = other1.streamID;
  return *this;
}
void PushSipStream::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PushSipStream(";
  out << "msgId=" << to_string(msgId);
  out << ", " << "streamingType=" << to_string(streamingType);
  out << ", " << "serverUrl=" << to_string(serverUrl);
  out << ", " << "streamID=" << to_string(streamID);
  out << ")";
}


PushRtspStream::~PushRtspStream() throw() {
}


void PushRtspStream::__set_msgId(const std::string& val) {
  this->msgId = val;
}

void PushRtspStream::__set_streamingType(const std::string& val) {
  this->streamingType = val;
}

void PushRtspStream::__set_serverUrl(const std::string& val) {
  this->serverUrl = val;
}

void PushRtspStream::__set_streamID(const std::string& val) {
  this->streamID = val;
}

void PushRtspStream::__set_streamURL(const std::string& val) {
  this->streamURL = val;
}

uint32_t PushRtspStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_msgId = false;
  bool isset_streamingType = false;
  bool isset_serverUrl = false;
  bool isset_streamID = false;
  bool isset_streamURL = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msgId);
          isset_msgId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamingType);
          isset_streamingType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverUrl);
          isset_serverUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamID);
          isset_streamID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamURL);
          isset_streamURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_msgId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_streamingType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_serverUrl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_streamID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_streamURL)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PushRtspStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PushRtspStream");

  xfer += oprot->writeFieldBegin("msgId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msgId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("streamingType", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->streamingType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serverUrl", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->serverUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("streamID", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->streamID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("streamURL", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->streamURL);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PushRtspStream &a, PushRtspStream &b) {
  using ::std::swap;
  swap(a.msgId, b.msgId);
  swap(a.streamingType, b.streamingType);
  swap(a.serverUrl, b.serverUrl);
  swap(a.streamID, b.streamID);
  swap(a.streamURL, b.streamURL);
}

PushRtspStream::PushRtspStream(const PushRtspStream& other2) {
  msgId = other2.msgId;
  streamingType = other2.streamingType;
  serverUrl = other2.serverUrl;
  streamID = other2.streamID;
  streamURL = other2.streamURL;
}
PushRtspStream& PushRtspStream::operator=(const PushRtspStream& other3) {
  msgId = other3.msgId;
  streamingType = other3.streamingType;
  serverUrl = other3.serverUrl;
  streamID = other3.streamID;
  streamURL = other3.streamURL;
  return *this;
}
void PushRtspStream::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PushRtspStream(";
  out << "msgId=" << to_string(msgId);
  out << ", " << "streamingType=" << to_string(streamingType);
  out << ", " << "serverUrl=" << to_string(serverUrl);
  out << ", " << "streamID=" << to_string(streamID);
  out << ", " << "streamURL=" << to_string(streamURL);
  out << ")";
}


PushOnvifStream::~PushOnvifStream() throw() {
}


void PushOnvifStream::__set_msgId(const std::string& val) {
  this->msgId = val;
}

void PushOnvifStream::__set_streamingType(const std::string& val) {
  this->streamingType = val;
}

void PushOnvifStream::__set_serverUrl(const std::string& val) {
  this->serverUrl = val;
}

void PushOnvifStream::__set_streamID(const std::string& val) {
  this->streamID = val;
}

void PushOnvifStream::__set_streamURL(const std::string& val) {
  this->streamURL = val;
}

uint32_t PushOnvifStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_msgId = false;
  bool isset_streamingType = false;
  bool isset_serverUrl = false;
  bool isset_streamID = false;
  bool isset_streamURL = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msgId);
          isset_msgId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamingType);
          isset_streamingType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverUrl);
          isset_serverUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamID);
          isset_streamID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamURL);
          isset_streamURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_msgId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_streamingType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_serverUrl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_streamID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_streamURL)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PushOnvifStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PushOnvifStream");

  xfer += oprot->writeFieldBegin("msgId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msgId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("streamingType", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->streamingType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serverUrl", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->serverUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("streamID", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->streamID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("streamURL", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->streamURL);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PushOnvifStream &a, PushOnvifStream &b) {
  using ::std::swap;
  swap(a.msgId, b.msgId);
  swap(a.streamingType, b.streamingType);
  swap(a.serverUrl, b.serverUrl);
  swap(a.streamID, b.streamID);
  swap(a.streamURL, b.streamURL);
}

PushOnvifStream::PushOnvifStream(const PushOnvifStream& other4) {
  msgId = other4.msgId;
  streamingType = other4.streamingType;
  serverUrl = other4.serverUrl;
  streamID = other4.streamID;
  streamURL = other4.streamURL;
}
PushOnvifStream& PushOnvifStream::operator=(const PushOnvifStream& other5) {
  msgId = other5.msgId;
  streamingType = other5.streamingType;
  serverUrl = other5.serverUrl;
  streamID = other5.streamID;
  streamURL = other5.streamURL;
  return *this;
}
void PushOnvifStream::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PushOnvifStream(";
  out << "msgId=" << to_string(msgId);
  out << ", " << "streamingType=" << to_string(streamingType);
  out << ", " << "serverUrl=" << to_string(serverUrl);
  out << ", " << "streamID=" << to_string(streamID);
  out << ", " << "streamURL=" << to_string(streamURL);
  out << ")";
}


StopSipStream::~StopSipStream() throw() {
}


void StopSipStream::__set_msgId(const std::string& val) {
  this->msgId = val;
}

void StopSipStream::__set_streamID(const std::string& val) {
  this->streamID = val;
}

void StopSipStream::__set_serverUrl(const std::string& val) {
  this->serverUrl = val;
__isset.serverUrl = true;
}

uint32_t StopSipStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_msgId = false;
  bool isset_streamID = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msgId);
          isset_msgId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamID);
          isset_streamID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverUrl);
          this->__isset.serverUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_msgId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_streamID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StopSipStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StopSipStream");

  xfer += oprot->writeFieldBegin("msgId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msgId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("streamID", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->streamID);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.serverUrl) {
    xfer += oprot->writeFieldBegin("serverUrl", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->serverUrl);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StopSipStream &a, StopSipStream &b) {
  using ::std::swap;
  swap(a.msgId, b.msgId);
  swap(a.streamID, b.streamID);
  swap(a.serverUrl, b.serverUrl);
  swap(a.__isset, b.__isset);
}

StopSipStream::StopSipStream(const StopSipStream& other6) {
  msgId = other6.msgId;
  streamID = other6.streamID;
  serverUrl = other6.serverUrl;
  __isset = other6.__isset;
}
StopSipStream& StopSipStream::operator=(const StopSipStream& other7) {
  msgId = other7.msgId;
  streamID = other7.streamID;
  serverUrl = other7.serverUrl;
  __isset = other7.__isset;
  return *this;
}
void StopSipStream::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StopSipStream(";
  out << "msgId=" << to_string(msgId);
  out << ", " << "streamID=" << to_string(streamID);
  out << ", " << "serverUrl="; (__isset.serverUrl ? (out << to_string(serverUrl)) : (out << "<null>"));
  out << ")";
}


StopRtspStream::~StopRtspStream() throw() {
}


void StopRtspStream::__set_msgId(const std::string& val) {
  this->msgId = val;
}

void StopRtspStream::__set_streamID(const std::string& val) {
  this->streamID = val;
}

void StopRtspStream::__set_streamURL(const std::string& val) {
  this->streamURL = val;
}

void StopRtspStream::__set_serverUrl(const std::string& val) {
  this->serverUrl = val;
__isset.serverUrl = true;
}

uint32_t StopRtspStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_msgId = false;
  bool isset_streamID = false;
  bool isset_streamURL = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msgId);
          isset_msgId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamID);
          isset_streamID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamURL);
          isset_streamURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverUrl);
          this->__isset.serverUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_msgId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_streamID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_streamURL)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StopRtspStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StopRtspStream");

  xfer += oprot->writeFieldBegin("msgId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msgId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("streamID", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->streamID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("streamURL", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->streamURL);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.serverUrl) {
    xfer += oprot->writeFieldBegin("serverUrl", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->serverUrl);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StopRtspStream &a, StopRtspStream &b) {
  using ::std::swap;
  swap(a.msgId, b.msgId);
  swap(a.streamID, b.streamID);
  swap(a.streamURL, b.streamURL);
  swap(a.serverUrl, b.serverUrl);
  swap(a.__isset, b.__isset);
}

StopRtspStream::StopRtspStream(const StopRtspStream& other8) {
  msgId = other8.msgId;
  streamID = other8.streamID;
  streamURL = other8.streamURL;
  serverUrl = other8.serverUrl;
  __isset = other8.__isset;
}
StopRtspStream& StopRtspStream::operator=(const StopRtspStream& other9) {
  msgId = other9.msgId;
  streamID = other9.streamID;
  streamURL = other9.streamURL;
  serverUrl = other9.serverUrl;
  __isset = other9.__isset;
  return *this;
}
void StopRtspStream::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StopRtspStream(";
  out << "msgId=" << to_string(msgId);
  out << ", " << "streamID=" << to_string(streamID);
  out << ", " << "streamURL=" << to_string(streamURL);
  out << ", " << "serverUrl="; (__isset.serverUrl ? (out << to_string(serverUrl)) : (out << "<null>"));
  out << ")";
}


StopOnvifStream::~StopOnvifStream() throw() {
}


void StopOnvifStream::__set_msgId(const std::string& val) {
  this->msgId = val;
}

void StopOnvifStream::__set_streamID(const std::string& val) {
  this->streamID = val;
}

void StopOnvifStream::__set_streamURL(const std::string& val) {
  this->streamURL = val;
}

void StopOnvifStream::__set_serverUrl(const std::string& val) {
  this->serverUrl = val;
__isset.serverUrl = true;
}

uint32_t StopOnvifStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_msgId = false;
  bool isset_streamID = false;
  bool isset_streamURL = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msgId);
          isset_msgId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamID);
          isset_streamID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamURL);
          isset_streamURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverUrl);
          this->__isset.serverUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_msgId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_streamID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_streamURL)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StopOnvifStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StopOnvifStream");

  xfer += oprot->writeFieldBegin("msgId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msgId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("streamID", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->streamID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("streamURL", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->streamURL);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.serverUrl) {
    xfer += oprot->writeFieldBegin("serverUrl", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->serverUrl);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StopOnvifStream &a, StopOnvifStream &b) {
  using ::std::swap;
  swap(a.msgId, b.msgId);
  swap(a.streamID, b.streamID);
  swap(a.streamURL, b.streamURL);
  swap(a.serverUrl, b.serverUrl);
  swap(a.__isset, b.__isset);
}

StopOnvifStream::StopOnvifStream(const StopOnvifStream& other10) {
  msgId = other10.msgId;
  streamID = other10.streamID;
  streamURL = other10.streamURL;
  serverUrl = other10.serverUrl;
  __isset = other10.__isset;
}
StopOnvifStream& StopOnvifStream::operator=(const StopOnvifStream& other11) {
  msgId = other11.msgId;
  streamID = other11.streamID;
  streamURL = other11.streamURL;
  serverUrl = other11.serverUrl;
  __isset = other11.__isset;
  return *this;
}
void StopOnvifStream::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StopOnvifStream(";
  out << "msgId=" << to_string(msgId);
  out << ", " << "streamID=" << to_string(streamID);
  out << ", " << "streamURL=" << to_string(streamURL);
  out << ", " << "serverUrl="; (__isset.serverUrl ? (out << to_string(serverUrl)) : (out << "<null>"));
  out << ")";
}

}}}}} // namespace
