/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StreamingRPCService_H
#define StreamingRPCService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "streaming_rpc_types.h"

namespace com { namespace lesgo { namespace thrift { namespace rpc { namespace streaming {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class StreamingRPCServiceIf {
 public:
  virtual ~StreamingRPCServiceIf() {}
  virtual int32_t pushSipStreaming(const PushSipStream& reqStream) = 0;
  virtual int32_t pushRtspStreaming(const PushRtspStream& reqStream) = 0;
  virtual int32_t pushOnvifStreaming(const PushOnvifStream& reqStream) = 0;
  virtual int32_t stopSipStreaming(const StopSipStream& reqStream) = 0;
  virtual int32_t stopRtspStreaming(const StopRtspStream& reqStream) = 0;
  virtual int32_t stopOnvifStreaming(const StopOnvifStream& reqStream) = 0;
};

class StreamingRPCServiceIfFactory {
 public:
  typedef StreamingRPCServiceIf Handler;

  virtual ~StreamingRPCServiceIfFactory() {}

  virtual StreamingRPCServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StreamingRPCServiceIf* /* handler */) = 0;
};

class StreamingRPCServiceIfSingletonFactory : virtual public StreamingRPCServiceIfFactory {
 public:
  StreamingRPCServiceIfSingletonFactory(const boost::shared_ptr<StreamingRPCServiceIf>& iface) : iface_(iface) {}
  virtual ~StreamingRPCServiceIfSingletonFactory() {}

  virtual StreamingRPCServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(StreamingRPCServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<StreamingRPCServiceIf> iface_;
};

class StreamingRPCServiceNull : virtual public StreamingRPCServiceIf {
 public:
  virtual ~StreamingRPCServiceNull() {}
  int32_t pushSipStreaming(const PushSipStream& /* reqStream */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t pushRtspStreaming(const PushRtspStream& /* reqStream */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t pushOnvifStreaming(const PushOnvifStream& /* reqStream */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t stopSipStreaming(const StopSipStream& /* reqStream */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t stopRtspStreaming(const StopRtspStream& /* reqStream */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t stopOnvifStreaming(const StopOnvifStream& /* reqStream */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _StreamingRPCService_pushSipStreaming_args__isset {
  _StreamingRPCService_pushSipStreaming_args__isset() : reqStream(false) {}
  bool reqStream :1;
} _StreamingRPCService_pushSipStreaming_args__isset;

class StreamingRPCService_pushSipStreaming_args {
 public:

  StreamingRPCService_pushSipStreaming_args(const StreamingRPCService_pushSipStreaming_args&);
  StreamingRPCService_pushSipStreaming_args& operator=(const StreamingRPCService_pushSipStreaming_args&);
  StreamingRPCService_pushSipStreaming_args() {
  }

  virtual ~StreamingRPCService_pushSipStreaming_args() throw();
  PushSipStream reqStream;

  _StreamingRPCService_pushSipStreaming_args__isset __isset;

  void __set_reqStream(const PushSipStream& val);

  bool operator == (const StreamingRPCService_pushSipStreaming_args & rhs) const
  {
    if (!(reqStream == rhs.reqStream))
      return false;
    return true;
  }
  bool operator != (const StreamingRPCService_pushSipStreaming_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingRPCService_pushSipStreaming_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StreamingRPCService_pushSipStreaming_pargs {
 public:


  virtual ~StreamingRPCService_pushSipStreaming_pargs() throw();
  const PushSipStream* reqStream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StreamingRPCService_pushSipStreaming_result__isset {
  _StreamingRPCService_pushSipStreaming_result__isset() : success(false) {}
  bool success :1;
} _StreamingRPCService_pushSipStreaming_result__isset;

class StreamingRPCService_pushSipStreaming_result {
 public:

  StreamingRPCService_pushSipStreaming_result(const StreamingRPCService_pushSipStreaming_result&);
  StreamingRPCService_pushSipStreaming_result& operator=(const StreamingRPCService_pushSipStreaming_result&);
  StreamingRPCService_pushSipStreaming_result() : success(0) {
  }

  virtual ~StreamingRPCService_pushSipStreaming_result() throw();
  int32_t success;

  _StreamingRPCService_pushSipStreaming_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const StreamingRPCService_pushSipStreaming_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StreamingRPCService_pushSipStreaming_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingRPCService_pushSipStreaming_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StreamingRPCService_pushSipStreaming_presult__isset {
  _StreamingRPCService_pushSipStreaming_presult__isset() : success(false) {}
  bool success :1;
} _StreamingRPCService_pushSipStreaming_presult__isset;

class StreamingRPCService_pushSipStreaming_presult {
 public:


  virtual ~StreamingRPCService_pushSipStreaming_presult() throw();
  int32_t* success;

  _StreamingRPCService_pushSipStreaming_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StreamingRPCService_pushRtspStreaming_args__isset {
  _StreamingRPCService_pushRtspStreaming_args__isset() : reqStream(false) {}
  bool reqStream :1;
} _StreamingRPCService_pushRtspStreaming_args__isset;

class StreamingRPCService_pushRtspStreaming_args {
 public:

  StreamingRPCService_pushRtspStreaming_args(const StreamingRPCService_pushRtspStreaming_args&);
  StreamingRPCService_pushRtspStreaming_args& operator=(const StreamingRPCService_pushRtspStreaming_args&);
  StreamingRPCService_pushRtspStreaming_args() {
  }

  virtual ~StreamingRPCService_pushRtspStreaming_args() throw();
  PushRtspStream reqStream;

  _StreamingRPCService_pushRtspStreaming_args__isset __isset;

  void __set_reqStream(const PushRtspStream& val);

  bool operator == (const StreamingRPCService_pushRtspStreaming_args & rhs) const
  {
    if (!(reqStream == rhs.reqStream))
      return false;
    return true;
  }
  bool operator != (const StreamingRPCService_pushRtspStreaming_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingRPCService_pushRtspStreaming_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StreamingRPCService_pushRtspStreaming_pargs {
 public:


  virtual ~StreamingRPCService_pushRtspStreaming_pargs() throw();
  const PushRtspStream* reqStream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StreamingRPCService_pushRtspStreaming_result__isset {
  _StreamingRPCService_pushRtspStreaming_result__isset() : success(false) {}
  bool success :1;
} _StreamingRPCService_pushRtspStreaming_result__isset;

class StreamingRPCService_pushRtspStreaming_result {
 public:

  StreamingRPCService_pushRtspStreaming_result(const StreamingRPCService_pushRtspStreaming_result&);
  StreamingRPCService_pushRtspStreaming_result& operator=(const StreamingRPCService_pushRtspStreaming_result&);
  StreamingRPCService_pushRtspStreaming_result() : success(0) {
  }

  virtual ~StreamingRPCService_pushRtspStreaming_result() throw();
  int32_t success;

  _StreamingRPCService_pushRtspStreaming_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const StreamingRPCService_pushRtspStreaming_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StreamingRPCService_pushRtspStreaming_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingRPCService_pushRtspStreaming_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StreamingRPCService_pushRtspStreaming_presult__isset {
  _StreamingRPCService_pushRtspStreaming_presult__isset() : success(false) {}
  bool success :1;
} _StreamingRPCService_pushRtspStreaming_presult__isset;

class StreamingRPCService_pushRtspStreaming_presult {
 public:


  virtual ~StreamingRPCService_pushRtspStreaming_presult() throw();
  int32_t* success;

  _StreamingRPCService_pushRtspStreaming_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StreamingRPCService_pushOnvifStreaming_args__isset {
  _StreamingRPCService_pushOnvifStreaming_args__isset() : reqStream(false) {}
  bool reqStream :1;
} _StreamingRPCService_pushOnvifStreaming_args__isset;

class StreamingRPCService_pushOnvifStreaming_args {
 public:

  StreamingRPCService_pushOnvifStreaming_args(const StreamingRPCService_pushOnvifStreaming_args&);
  StreamingRPCService_pushOnvifStreaming_args& operator=(const StreamingRPCService_pushOnvifStreaming_args&);
  StreamingRPCService_pushOnvifStreaming_args() {
  }

  virtual ~StreamingRPCService_pushOnvifStreaming_args() throw();
  PushOnvifStream reqStream;

  _StreamingRPCService_pushOnvifStreaming_args__isset __isset;

  void __set_reqStream(const PushOnvifStream& val);

  bool operator == (const StreamingRPCService_pushOnvifStreaming_args & rhs) const
  {
    if (!(reqStream == rhs.reqStream))
      return false;
    return true;
  }
  bool operator != (const StreamingRPCService_pushOnvifStreaming_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingRPCService_pushOnvifStreaming_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StreamingRPCService_pushOnvifStreaming_pargs {
 public:


  virtual ~StreamingRPCService_pushOnvifStreaming_pargs() throw();
  const PushOnvifStream* reqStream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StreamingRPCService_pushOnvifStreaming_result__isset {
  _StreamingRPCService_pushOnvifStreaming_result__isset() : success(false) {}
  bool success :1;
} _StreamingRPCService_pushOnvifStreaming_result__isset;

class StreamingRPCService_pushOnvifStreaming_result {
 public:

  StreamingRPCService_pushOnvifStreaming_result(const StreamingRPCService_pushOnvifStreaming_result&);
  StreamingRPCService_pushOnvifStreaming_result& operator=(const StreamingRPCService_pushOnvifStreaming_result&);
  StreamingRPCService_pushOnvifStreaming_result() : success(0) {
  }

  virtual ~StreamingRPCService_pushOnvifStreaming_result() throw();
  int32_t success;

  _StreamingRPCService_pushOnvifStreaming_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const StreamingRPCService_pushOnvifStreaming_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StreamingRPCService_pushOnvifStreaming_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingRPCService_pushOnvifStreaming_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StreamingRPCService_pushOnvifStreaming_presult__isset {
  _StreamingRPCService_pushOnvifStreaming_presult__isset() : success(false) {}
  bool success :1;
} _StreamingRPCService_pushOnvifStreaming_presult__isset;

class StreamingRPCService_pushOnvifStreaming_presult {
 public:


  virtual ~StreamingRPCService_pushOnvifStreaming_presult() throw();
  int32_t* success;

  _StreamingRPCService_pushOnvifStreaming_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StreamingRPCService_stopSipStreaming_args__isset {
  _StreamingRPCService_stopSipStreaming_args__isset() : reqStream(false) {}
  bool reqStream :1;
} _StreamingRPCService_stopSipStreaming_args__isset;

class StreamingRPCService_stopSipStreaming_args {
 public:

  StreamingRPCService_stopSipStreaming_args(const StreamingRPCService_stopSipStreaming_args&);
  StreamingRPCService_stopSipStreaming_args& operator=(const StreamingRPCService_stopSipStreaming_args&);
  StreamingRPCService_stopSipStreaming_args() {
  }

  virtual ~StreamingRPCService_stopSipStreaming_args() throw();
  StopSipStream reqStream;

  _StreamingRPCService_stopSipStreaming_args__isset __isset;

  void __set_reqStream(const StopSipStream& val);

  bool operator == (const StreamingRPCService_stopSipStreaming_args & rhs) const
  {
    if (!(reqStream == rhs.reqStream))
      return false;
    return true;
  }
  bool operator != (const StreamingRPCService_stopSipStreaming_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingRPCService_stopSipStreaming_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StreamingRPCService_stopSipStreaming_pargs {
 public:


  virtual ~StreamingRPCService_stopSipStreaming_pargs() throw();
  const StopSipStream* reqStream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StreamingRPCService_stopSipStreaming_result__isset {
  _StreamingRPCService_stopSipStreaming_result__isset() : success(false) {}
  bool success :1;
} _StreamingRPCService_stopSipStreaming_result__isset;

class StreamingRPCService_stopSipStreaming_result {
 public:

  StreamingRPCService_stopSipStreaming_result(const StreamingRPCService_stopSipStreaming_result&);
  StreamingRPCService_stopSipStreaming_result& operator=(const StreamingRPCService_stopSipStreaming_result&);
  StreamingRPCService_stopSipStreaming_result() : success(0) {
  }

  virtual ~StreamingRPCService_stopSipStreaming_result() throw();
  int32_t success;

  _StreamingRPCService_stopSipStreaming_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const StreamingRPCService_stopSipStreaming_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StreamingRPCService_stopSipStreaming_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingRPCService_stopSipStreaming_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StreamingRPCService_stopSipStreaming_presult__isset {
  _StreamingRPCService_stopSipStreaming_presult__isset() : success(false) {}
  bool success :1;
} _StreamingRPCService_stopSipStreaming_presult__isset;

class StreamingRPCService_stopSipStreaming_presult {
 public:


  virtual ~StreamingRPCService_stopSipStreaming_presult() throw();
  int32_t* success;

  _StreamingRPCService_stopSipStreaming_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StreamingRPCService_stopRtspStreaming_args__isset {
  _StreamingRPCService_stopRtspStreaming_args__isset() : reqStream(false) {}
  bool reqStream :1;
} _StreamingRPCService_stopRtspStreaming_args__isset;

class StreamingRPCService_stopRtspStreaming_args {
 public:

  StreamingRPCService_stopRtspStreaming_args(const StreamingRPCService_stopRtspStreaming_args&);
  StreamingRPCService_stopRtspStreaming_args& operator=(const StreamingRPCService_stopRtspStreaming_args&);
  StreamingRPCService_stopRtspStreaming_args() {
  }

  virtual ~StreamingRPCService_stopRtspStreaming_args() throw();
  StopRtspStream reqStream;

  _StreamingRPCService_stopRtspStreaming_args__isset __isset;

  void __set_reqStream(const StopRtspStream& val);

  bool operator == (const StreamingRPCService_stopRtspStreaming_args & rhs) const
  {
    if (!(reqStream == rhs.reqStream))
      return false;
    return true;
  }
  bool operator != (const StreamingRPCService_stopRtspStreaming_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingRPCService_stopRtspStreaming_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StreamingRPCService_stopRtspStreaming_pargs {
 public:


  virtual ~StreamingRPCService_stopRtspStreaming_pargs() throw();
  const StopRtspStream* reqStream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StreamingRPCService_stopRtspStreaming_result__isset {
  _StreamingRPCService_stopRtspStreaming_result__isset() : success(false) {}
  bool success :1;
} _StreamingRPCService_stopRtspStreaming_result__isset;

class StreamingRPCService_stopRtspStreaming_result {
 public:

  StreamingRPCService_stopRtspStreaming_result(const StreamingRPCService_stopRtspStreaming_result&);
  StreamingRPCService_stopRtspStreaming_result& operator=(const StreamingRPCService_stopRtspStreaming_result&);
  StreamingRPCService_stopRtspStreaming_result() : success(0) {
  }

  virtual ~StreamingRPCService_stopRtspStreaming_result() throw();
  int32_t success;

  _StreamingRPCService_stopRtspStreaming_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const StreamingRPCService_stopRtspStreaming_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StreamingRPCService_stopRtspStreaming_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingRPCService_stopRtspStreaming_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StreamingRPCService_stopRtspStreaming_presult__isset {
  _StreamingRPCService_stopRtspStreaming_presult__isset() : success(false) {}
  bool success :1;
} _StreamingRPCService_stopRtspStreaming_presult__isset;

class StreamingRPCService_stopRtspStreaming_presult {
 public:


  virtual ~StreamingRPCService_stopRtspStreaming_presult() throw();
  int32_t* success;

  _StreamingRPCService_stopRtspStreaming_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StreamingRPCService_stopOnvifStreaming_args__isset {
  _StreamingRPCService_stopOnvifStreaming_args__isset() : reqStream(false) {}
  bool reqStream :1;
} _StreamingRPCService_stopOnvifStreaming_args__isset;

class StreamingRPCService_stopOnvifStreaming_args {
 public:

  StreamingRPCService_stopOnvifStreaming_args(const StreamingRPCService_stopOnvifStreaming_args&);
  StreamingRPCService_stopOnvifStreaming_args& operator=(const StreamingRPCService_stopOnvifStreaming_args&);
  StreamingRPCService_stopOnvifStreaming_args() {
  }

  virtual ~StreamingRPCService_stopOnvifStreaming_args() throw();
  StopOnvifStream reqStream;

  _StreamingRPCService_stopOnvifStreaming_args__isset __isset;

  void __set_reqStream(const StopOnvifStream& val);

  bool operator == (const StreamingRPCService_stopOnvifStreaming_args & rhs) const
  {
    if (!(reqStream == rhs.reqStream))
      return false;
    return true;
  }
  bool operator != (const StreamingRPCService_stopOnvifStreaming_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingRPCService_stopOnvifStreaming_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StreamingRPCService_stopOnvifStreaming_pargs {
 public:


  virtual ~StreamingRPCService_stopOnvifStreaming_pargs() throw();
  const StopOnvifStream* reqStream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StreamingRPCService_stopOnvifStreaming_result__isset {
  _StreamingRPCService_stopOnvifStreaming_result__isset() : success(false) {}
  bool success :1;
} _StreamingRPCService_stopOnvifStreaming_result__isset;

class StreamingRPCService_stopOnvifStreaming_result {
 public:

  StreamingRPCService_stopOnvifStreaming_result(const StreamingRPCService_stopOnvifStreaming_result&);
  StreamingRPCService_stopOnvifStreaming_result& operator=(const StreamingRPCService_stopOnvifStreaming_result&);
  StreamingRPCService_stopOnvifStreaming_result() : success(0) {
  }

  virtual ~StreamingRPCService_stopOnvifStreaming_result() throw();
  int32_t success;

  _StreamingRPCService_stopOnvifStreaming_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const StreamingRPCService_stopOnvifStreaming_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StreamingRPCService_stopOnvifStreaming_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamingRPCService_stopOnvifStreaming_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StreamingRPCService_stopOnvifStreaming_presult__isset {
  _StreamingRPCService_stopOnvifStreaming_presult__isset() : success(false) {}
  bool success :1;
} _StreamingRPCService_stopOnvifStreaming_presult__isset;

class StreamingRPCService_stopOnvifStreaming_presult {
 public:


  virtual ~StreamingRPCService_stopOnvifStreaming_presult() throw();
  int32_t* success;

  _StreamingRPCService_stopOnvifStreaming_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StreamingRPCServiceClient : virtual public StreamingRPCServiceIf {
 public:
  StreamingRPCServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StreamingRPCServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t pushSipStreaming(const PushSipStream& reqStream);
  void send_pushSipStreaming(const PushSipStream& reqStream);
  int32_t recv_pushSipStreaming();
  int32_t pushRtspStreaming(const PushRtspStream& reqStream);
  void send_pushRtspStreaming(const PushRtspStream& reqStream);
  int32_t recv_pushRtspStreaming();
  int32_t pushOnvifStreaming(const PushOnvifStream& reqStream);
  void send_pushOnvifStreaming(const PushOnvifStream& reqStream);
  int32_t recv_pushOnvifStreaming();
  int32_t stopSipStreaming(const StopSipStream& reqStream);
  void send_stopSipStreaming(const StopSipStream& reqStream);
  int32_t recv_stopSipStreaming();
  int32_t stopRtspStreaming(const StopRtspStream& reqStream);
  void send_stopRtspStreaming(const StopRtspStream& reqStream);
  int32_t recv_stopRtspStreaming();
  int32_t stopOnvifStreaming(const StopOnvifStream& reqStream);
  void send_stopOnvifStreaming(const StopOnvifStream& reqStream);
  int32_t recv_stopOnvifStreaming();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class StreamingRPCServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<StreamingRPCServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StreamingRPCServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_pushSipStreaming(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pushRtspStreaming(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pushOnvifStreaming(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopSipStreaming(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopRtspStreaming(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopOnvifStreaming(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StreamingRPCServiceProcessor(boost::shared_ptr<StreamingRPCServiceIf> iface) :
    iface_(iface) {
    processMap_["pushSipStreaming"] = &StreamingRPCServiceProcessor::process_pushSipStreaming;
    processMap_["pushRtspStreaming"] = &StreamingRPCServiceProcessor::process_pushRtspStreaming;
    processMap_["pushOnvifStreaming"] = &StreamingRPCServiceProcessor::process_pushOnvifStreaming;
    processMap_["stopSipStreaming"] = &StreamingRPCServiceProcessor::process_stopSipStreaming;
    processMap_["stopRtspStreaming"] = &StreamingRPCServiceProcessor::process_stopRtspStreaming;
    processMap_["stopOnvifStreaming"] = &StreamingRPCServiceProcessor::process_stopOnvifStreaming;
  }

  virtual ~StreamingRPCServiceProcessor() {}
};

class StreamingRPCServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StreamingRPCServiceProcessorFactory(const ::boost::shared_ptr< StreamingRPCServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< StreamingRPCServiceIfFactory > handlerFactory_;
};

class StreamingRPCServiceMultiface : virtual public StreamingRPCServiceIf {
 public:
  StreamingRPCServiceMultiface(std::vector<boost::shared_ptr<StreamingRPCServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StreamingRPCServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<StreamingRPCServiceIf> > ifaces_;
  StreamingRPCServiceMultiface() {}
  void add(boost::shared_ptr<StreamingRPCServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t pushSipStreaming(const PushSipStream& reqStream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushSipStreaming(reqStream);
    }
    return ifaces_[i]->pushSipStreaming(reqStream);
  }

  int32_t pushRtspStreaming(const PushRtspStream& reqStream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushRtspStreaming(reqStream);
    }
    return ifaces_[i]->pushRtspStreaming(reqStream);
  }

  int32_t pushOnvifStreaming(const PushOnvifStream& reqStream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushOnvifStreaming(reqStream);
    }
    return ifaces_[i]->pushOnvifStreaming(reqStream);
  }

  int32_t stopSipStreaming(const StopSipStream& reqStream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopSipStreaming(reqStream);
    }
    return ifaces_[i]->stopSipStreaming(reqStream);
  }

  int32_t stopRtspStreaming(const StopRtspStream& reqStream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopRtspStreaming(reqStream);
    }
    return ifaces_[i]->stopRtspStreaming(reqStream);
  }

  int32_t stopOnvifStreaming(const StopOnvifStream& reqStream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopOnvifStreaming(reqStream);
    }
    return ifaces_[i]->stopOnvifStreaming(reqStream);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class StreamingRPCServiceConcurrentClient : virtual public StreamingRPCServiceIf {
 public:
  StreamingRPCServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StreamingRPCServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t pushSipStreaming(const PushSipStream& reqStream);
  int32_t send_pushSipStreaming(const PushSipStream& reqStream);
  int32_t recv_pushSipStreaming(const int32_t seqid);
  int32_t pushRtspStreaming(const PushRtspStream& reqStream);
  int32_t send_pushRtspStreaming(const PushRtspStream& reqStream);
  int32_t recv_pushRtspStreaming(const int32_t seqid);
  int32_t pushOnvifStreaming(const PushOnvifStream& reqStream);
  int32_t send_pushOnvifStreaming(const PushOnvifStream& reqStream);
  int32_t recv_pushOnvifStreaming(const int32_t seqid);
  int32_t stopSipStreaming(const StopSipStream& reqStream);
  int32_t send_stopSipStreaming(const StopSipStream& reqStream);
  int32_t recv_stopSipStreaming(const int32_t seqid);
  int32_t stopRtspStreaming(const StopRtspStream& reqStream);
  int32_t send_stopRtspStreaming(const StopRtspStream& reqStream);
  int32_t recv_stopRtspStreaming(const int32_t seqid);
  int32_t stopOnvifStreaming(const StopOnvifStream& reqStream);
  int32_t send_stopOnvifStreaming(const StopOnvifStream& reqStream);
  int32_t recv_stopOnvifStreaming(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}}}} // namespace

#endif
