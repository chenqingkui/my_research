/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef streaming_rpc_TYPES_H
#define streaming_rpc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace com { namespace lesgo { namespace thrift { namespace rpc { namespace streaming {

struct PROTOCOL_TYPE {
  enum type {
    PROTOCOL_TYPE_RTSP = 11,
    PROTOCOL_TYPE_SIP = 12,
    PROTOCOL_TYPE_ONVIF = 13
  };
};

extern const std::map<int, const char*> _PROTOCOL_TYPE_VALUES_TO_NAMES;

struct STREAMING_TYPE {
  enum type {
    STREAMING_TYPE_ES = 101,
    STREAMING_TYPE_PS = 102,
    STREAMING_TYPE_TS = 103
  };
};

extern const std::map<int, const char*> _STREAMING_TYPE_VALUES_TO_NAMES;

class PushSipStream;

class PushRtspStream;

class PushOnvifStream;

class StopSipStream;

class StopRtspStream;

class StopOnvifStream;


class PushSipStream : public virtual ::apache::thrift::TBase {
 public:

  PushSipStream(const PushSipStream&);
  PushSipStream& operator=(const PushSipStream&);
  PushSipStream() : msgId(), streamingType(), serverUrl(), streamID() {
  }

  virtual ~PushSipStream() throw();
  std::string msgId;
  std::string streamingType;
  std::string serverUrl;
  std::string streamID;

  void __set_msgId(const std::string& val);

  void __set_streamingType(const std::string& val);

  void __set_serverUrl(const std::string& val);

  void __set_streamID(const std::string& val);

  bool operator == (const PushSipStream & rhs) const
  {
    if (!(msgId == rhs.msgId))
      return false;
    if (!(streamingType == rhs.streamingType))
      return false;
    if (!(serverUrl == rhs.serverUrl))
      return false;
    if (!(streamID == rhs.streamID))
      return false;
    return true;
  }
  bool operator != (const PushSipStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushSipStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PushSipStream &a, PushSipStream &b);

inline std::ostream& operator<<(std::ostream& out, const PushSipStream& obj)
{
  obj.printTo(out);
  return out;
}


class PushRtspStream : public virtual ::apache::thrift::TBase {
 public:

  PushRtspStream(const PushRtspStream&);
  PushRtspStream& operator=(const PushRtspStream&);
  PushRtspStream() : msgId(), streamingType(), serverUrl(), streamID(), streamURL() {
  }

  virtual ~PushRtspStream() throw();
  std::string msgId;
  std::string streamingType;
  std::string serverUrl;
  std::string streamID;
  std::string streamURL;

  void __set_msgId(const std::string& val);

  void __set_streamingType(const std::string& val);

  void __set_serverUrl(const std::string& val);

  void __set_streamID(const std::string& val);

  void __set_streamURL(const std::string& val);

  bool operator == (const PushRtspStream & rhs) const
  {
    if (!(msgId == rhs.msgId))
      return false;
    if (!(streamingType == rhs.streamingType))
      return false;
    if (!(serverUrl == rhs.serverUrl))
      return false;
    if (!(streamID == rhs.streamID))
      return false;
    if (!(streamURL == rhs.streamURL))
      return false;
    return true;
  }
  bool operator != (const PushRtspStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushRtspStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PushRtspStream &a, PushRtspStream &b);

inline std::ostream& operator<<(std::ostream& out, const PushRtspStream& obj)
{
  obj.printTo(out);
  return out;
}


class PushOnvifStream : public virtual ::apache::thrift::TBase {
 public:

  PushOnvifStream(const PushOnvifStream&);
  PushOnvifStream& operator=(const PushOnvifStream&);
  PushOnvifStream() : msgId(), streamingType(), serverUrl(), streamID(), streamURL() {
  }

  virtual ~PushOnvifStream() throw();
  std::string msgId;
  std::string streamingType;
  std::string serverUrl;
  std::string streamID;
  std::string streamURL;

  void __set_msgId(const std::string& val);

  void __set_streamingType(const std::string& val);

  void __set_serverUrl(const std::string& val);

  void __set_streamID(const std::string& val);

  void __set_streamURL(const std::string& val);

  bool operator == (const PushOnvifStream & rhs) const
  {
    if (!(msgId == rhs.msgId))
      return false;
    if (!(streamingType == rhs.streamingType))
      return false;
    if (!(serverUrl == rhs.serverUrl))
      return false;
    if (!(streamID == rhs.streamID))
      return false;
    if (!(streamURL == rhs.streamURL))
      return false;
    return true;
  }
  bool operator != (const PushOnvifStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushOnvifStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PushOnvifStream &a, PushOnvifStream &b);

inline std::ostream& operator<<(std::ostream& out, const PushOnvifStream& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _StopSipStream__isset {
  _StopSipStream__isset() : serverUrl(false) {}
  bool serverUrl :1;
} _StopSipStream__isset;

class StopSipStream : public virtual ::apache::thrift::TBase {
 public:

  StopSipStream(const StopSipStream&);
  StopSipStream& operator=(const StopSipStream&);
  StopSipStream() : msgId(), streamID(), serverUrl() {
  }

  virtual ~StopSipStream() throw();
  std::string msgId;
  std::string streamID;
  std::string serverUrl;

  _StopSipStream__isset __isset;

  void __set_msgId(const std::string& val);

  void __set_streamID(const std::string& val);

  void __set_serverUrl(const std::string& val);

  bool operator == (const StopSipStream & rhs) const
  {
    if (!(msgId == rhs.msgId))
      return false;
    if (!(streamID == rhs.streamID))
      return false;
    if (__isset.serverUrl != rhs.__isset.serverUrl)
      return false;
    else if (__isset.serverUrl && !(serverUrl == rhs.serverUrl))
      return false;
    return true;
  }
  bool operator != (const StopSipStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StopSipStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StopSipStream &a, StopSipStream &b);

inline std::ostream& operator<<(std::ostream& out, const StopSipStream& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _StopRtspStream__isset {
  _StopRtspStream__isset() : serverUrl(false) {}
  bool serverUrl :1;
} _StopRtspStream__isset;

class StopRtspStream : public virtual ::apache::thrift::TBase {
 public:

  StopRtspStream(const StopRtspStream&);
  StopRtspStream& operator=(const StopRtspStream&);
  StopRtspStream() : msgId(), streamID(), streamURL(), serverUrl() {
  }

  virtual ~StopRtspStream() throw();
  std::string msgId;
  std::string streamID;
  std::string streamURL;
  std::string serverUrl;

  _StopRtspStream__isset __isset;

  void __set_msgId(const std::string& val);

  void __set_streamID(const std::string& val);

  void __set_streamURL(const std::string& val);

  void __set_serverUrl(const std::string& val);

  bool operator == (const StopRtspStream & rhs) const
  {
    if (!(msgId == rhs.msgId))
      return false;
    if (!(streamID == rhs.streamID))
      return false;
    if (!(streamURL == rhs.streamURL))
      return false;
    if (__isset.serverUrl != rhs.__isset.serverUrl)
      return false;
    else if (__isset.serverUrl && !(serverUrl == rhs.serverUrl))
      return false;
    return true;
  }
  bool operator != (const StopRtspStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StopRtspStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StopRtspStream &a, StopRtspStream &b);

inline std::ostream& operator<<(std::ostream& out, const StopRtspStream& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _StopOnvifStream__isset {
  _StopOnvifStream__isset() : serverUrl(false) {}
  bool serverUrl :1;
} _StopOnvifStream__isset;

class StopOnvifStream : public virtual ::apache::thrift::TBase {
 public:

  StopOnvifStream(const StopOnvifStream&);
  StopOnvifStream& operator=(const StopOnvifStream&);
  StopOnvifStream() : msgId(), streamID(), streamURL(), serverUrl() {
  }

  virtual ~StopOnvifStream() throw();
  std::string msgId;
  std::string streamID;
  std::string streamURL;
  std::string serverUrl;

  _StopOnvifStream__isset __isset;

  void __set_msgId(const std::string& val);

  void __set_streamID(const std::string& val);

  void __set_streamURL(const std::string& val);

  void __set_serverUrl(const std::string& val);

  bool operator == (const StopOnvifStream & rhs) const
  {
    if (!(msgId == rhs.msgId))
      return false;
    if (!(streamID == rhs.streamID))
      return false;
    if (!(streamURL == rhs.streamURL))
      return false;
    if (__isset.serverUrl != rhs.__isset.serverUrl)
      return false;
    else if (__isset.serverUrl && !(serverUrl == rhs.serverUrl))
      return false;
    return true;
  }
  bool operator != (const StopOnvifStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StopOnvifStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StopOnvifStream &a, StopOnvifStream &b);

inline std::ostream& operator<<(std::ostream& out, const StopOnvifStream& obj)
{
  obj.printTo(out);
  return out;
}

}}}}} // namespace

#endif
